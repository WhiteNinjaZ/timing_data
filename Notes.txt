Need a way to go from f4pga to vtr. Average using the following method:
For every net with a given wire type solve for wire type and 


Might want to make your own experiemnt playground rr graph. 
Could do this by picking a few paths and adding up their wire types.


Surely xilinx has some kind of output that tells us how many of certain wire types and pips there are in a net. 
in other words, this is what I am made of and this is my timing. If we get something that is an average and build an rr
is it the same type of deal?


Remember that the wire names going through a CLB tile is a portion of a wire passing through that block.

This: INT_L_X4Y53/INT_L.LOGIC_OUTS_L23->>WW2BEG1 is a pip. Most things with the arrows are


vivado gives the values for the four corners. Modify the code to except an argument that figures out 
which corner we want to calculate. Default is mean of all 4. 
or
since a run takes so long just report the 4 corners along with the mean. <---The better idea

Q:
How does vtr calculate its  timing? Is it just the sum of all wire timing in a net?

A:
Switches, **Wires**, and ports on CLB are considered when looking at timing.

Conversion:
Switches:
Cout = downstream C #TODO
Cin = CAP
R = RES 
Tdel = 4 corners (which one or mean?)

Wires: 
Rmetal = Res/unit length
Cmetal = Cap/unit length

# for now we will just assume that it is (total R/C)/L we already did the bulk of the work here. 
# It might also be just R and C since we found these from parts of wires anyway.



# NEXT: work on log_rout_pip ()


# Switch break down: 
# input switch for connection blocks (connection block)
# switches between wires (switchblocks (this one is generalized hevily but can be detailed))



##### **** The important thing to remember for research is that it is ok to be a little slow at the beginning. The important thing is to keep at it until 
# you make it into the zone.




############################### XILINX ############################
                 Wire
#                /                    /----------Internal--------\
#               /
#       |-------|------|              |----|   |---------|
#       |       |(6)   |    (5)       |    |   |         |(1)
#       |       X--CB--|-part of wire-|\(4)|   |  logic  X------|
#       |       |   ^  |              |pass|   |         |      |                  
#       |      SB <buff|              |Tran|   |         |      |   
#       |       |      |              |   \|(3)|---------|      |  (2)
#       |       |      |              |    X-------(2/3)--------|
#       |-------|------|              |----|-------/CLBLM_L_Cx2-|
#               /                           
#              /
#             /
#            Wire
#
       ^^^^ The above image is correct

(1) outpin (has timing i.e. CLBLL_L_X4Y53/CLBLL_LL_D). Of the same name that is classified as part of a wire
(2) wire portion of outpin (no timing)
(3) CLBLL_L_X4Y53/CLBLL_L.CLBLL_LL_D->>CLBLL_LL_DMUX a buffer also with unique timing info
(2/3) A timing oddity? This structure contains timing of parts 1-3 but not beyond. As far as I can tell 
       this timing contributes to both vivado (at least its part of the nets timing) and symbiflow. 
       These are missing part 4+
(4) CLBLL_L_X4Y53/CLBLL_L.CLBLL_LL_DMUX->CLBLL_LOGIC_OUTS23 (pip) pass transistor. 
(5) CLBLL_L_X4Y53/CLBLL_LOGIC_OUTS23 part of wire
(6) INT_L_X4Y53/INT_L.LOGIC_OUTS_L23->>WW2BEG1 (buffer)




Xs are timing points where switches are

##########################VTR ##############################                                                                  
#                                                                    
#                                                                    
#                        |---------X------------wire
#                        |        /|
#                        |  SB   / |
#                        |      /  |
#                        |     /   |
#                        |---------|                                             
#                             |              
#                             |              
#                             |         |---------|                                   
#                             |         |         |              
#                        CB-->X-----<---|  logic  |              
#                             |         |         |              
#                             |         |         |              
#                                       |---------|              


? is xilinx the same sum from logic -> cb for every type of wire

CBvtr = 



Note: 

SB is easy :) we can toattaly just use the segment definitions to specify diffrent switch types. Take average connection to all wires. 
(find every instance of a buffer from a wire to WL1 or WR1)     <---------Next step


*** How to we model Xiilnx in VTR: 
* note that internal structure should not be incorporated in CB for the following reason: it is specific to certain paths, 
also recall that only O6 on the internal muxes have those gost timing wires. 

* plan: 
model CB = (4)+(5)+(6)
       ? does that eq hold for all pins to a given wire? (latter)

model SB = average of all wires going TOO a specific wire length.


# FInals:


# Wires:
# for this we are looking at the timing on wire segments found within nets (this happens every now and again)

SB:
Easy just find the timing to a specific type of wire.

CB:
(4) CLBLL_L_X4Y53/CLBLL_L.CLBLL_LL_DMUX→CLBLL_LOGIC_OUTS23 [Passtransistor] \ take the average of the ports here before the bellow and add them to CB (not sure if this is valid)
(5) CLBLL_L_X4Y53/CLBLL_LOGIC_OUTS23 [Part of Wire]                         /
(6) INT_L_X4Y53/INT_L.LOGIC_OUTS_L23→>WW2BEG1 [Buffer] (easy) <-- at least get this done


# from DR. Goeders: dont include the repeats: those are just caries and our model doesnt have carries.